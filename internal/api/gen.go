// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v1/messages)
	PostV1messages(w http.ResponseWriter, r *http.Request) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// PostV1messages operation middleware
func (siw *ServerInterfaceWrapper) PostV1messages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PostV1messages(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Post("/v1/messages", wrapper.PostV1messages)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
